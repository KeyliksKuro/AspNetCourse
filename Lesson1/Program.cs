//Dependency injection(DI) или внедрение зависимостей представл€ет механизм,
//который позвол€ет сделать взаимодействующие в приложении объекты слабосв€занными.

//Example1
//ѕример зависимости

//Example2
//»збавление от зависимости классов

//«а управление сервисами в приложении в классе WebApplicationBuilder определено свойство Services
//—войства сервиса (ServiceDescriptor)
//ServiceType: тип сервиса
//ImplementationType: тип реализации сервиса
//Lifetime: жизненный цикл сервиса

//Example3
//—оздание сервиса

//Example4
//—пособы получени€ сервиса (пример дл€ конструктора)

//Example5
//—пособы получени€ сервиса (пример с middleware)

//Example6
//∆изненный цикл зависимостей (transient сервис)

//Example7
//ѕрименение сервисов в классах middleware

//Example8
//ћножественна€ регистраци€ сервисов

//Example9
//»спользование несколькими зависимост€ми одного и то же объекта

using Lesson1.Examples.Example3;

new Example().Run();